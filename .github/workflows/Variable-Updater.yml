name: rM-Github-CICD-Manual-VariableAndSecret-Updater
run-name: ${{ github.triggering_actor }} ran pipeline to update repository variables.
on:
    workflow_dispatch:
        inputs:
            PAT:
              description: 'Please enter your personal access token'
              type: string
              required: true
            
            Custom_Repository:
              description: 'Please check to update variables in custom repository or uncheck for ALL repositories.'     
              required: true
              type: boolean

            Repository_Name:
                description: 'Please enter the repository Name'
                type: string
                required: false
                    
            Variable_Type:
              description: 'Please select variable type to update it in repository.'     
              required: true
              type: choice
              options:
                - Environment Variable
                - Repository Secret
                - New Variable
                - New Secret

            Repository_Environment:
                description: 'Please choose environment to update variable'
                type: choice
                required: false
                default: 'development'
                options:
                    - development
                    - staging
                    - production
            
            Variable_Name:
              description: 'Please choose Variable Name'
              type: choice
              required: true
              options:
                - APIGEE_ENVIRONMENT
                - APIGEE_HOST
                - GCP_PROJECT
                - GCP_REGION
                - GA_SSH_PRIVATE_KEY
                - SERVICE_ACCOUNT
                - SLACK_WEBHOOK_URL
                - WORKLOAD_IDENTITY_PROVIDER
            
            New_Variable_Name:
              description: 'Please give New Variable Name'
              type: string
              required: true

            Variable_Value:
              description: 'Please enter Value of variable to be updated'
              type: string
              required: true
jobs:
    Update_repo_variables:
        runs-on: ubuntu-latest
        env:
            owner_name: reMarkable
            github_token: ${{ inputs.PAT }}
        steps:
            - name: Check out repository code
              uses: actions/checkout@v4
            - name: Fetch all repositories
              id: fetch-repos
              if: inputs.Custom_Repository != true
              run: |
                echo "Fetching all team repositories......................................"

                curl -L -X GET -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $github_token" -H "X-GitHub-Api-Version: 2022-11-28" "https://api.github.com/orgs/$owner_name/teams/systems-integrations/repos?per_page=100&page=1" > repo_list.json
            - name: Update repository secrets
              if: inputs.Variable_Type == 'Repository Secret'
              run: |
                  npm install libsodium-wrappers
                  starts_with_prefix() {
                      local str="$1"
                      local prefix="$2"
                      [[ "$str" == "$prefix"* ]]
                  }
                  
                  get_public_key(){
                    echo "Fetching repository public key......................................"
                    local repo_name="$1"
                    curl -L -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $github_token" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/$owner_name/$repo_name/actions/secrets/public-key > repo_public_key.json
                    repo_public_key=$(cat repo_public_key.json | jq -r .key)
                    repo_public_key_id=$(cat repo_public_key.json | jq -r .key_id)
                    echo "public key: $repo_public_key"
                    echo "publick key id: $repo_public_key_id"
                  }
                  
                  Encrypt_value(){
                    echo "Encrypting Input Value ......................................."
                    encrypted_variable_value=$(node encrypt-secret.js ${{ inputs.Variable_Value }} $repo_public_key)
                    echo "Encrypted Variable Value:$encrypted_variable_value"
                  }

                  Update_Secret(){
                    echo "Updating Secret value ......................................"
                    local repo_name="$1"
                    curl -L \
                      -X PUT \
                      -H "Accept: application/vnd.github+json" \
                      -H "Authorization: Bearer $github_token" \
                      -H "X-GitHub-Api-Version: 2022-11-28" \
                      https://api.github.com/repos/$owner_name/$repo_name/actions/secrets/${{ inputs.Variable_Name }} \
                      -d '{"encrypted_value": "'$encrypted_variable_value'","key_id": "'$repo_public_key_id'"}'
                  }
                
                  if [ ${{inputs.Custom_Repository}} != true ];
                  then
                    repo_list_array=$(cat repo_list.json|jq -r '.[].name')
                    #echo "${repo_list_array[*]}"
                    repo_list_names_array=()
                    while IFS= read -r line; do
                      repo_list_names_array+=( "$line" )
                    done <<< $repo_list_array
                                    
                    for repo_name in "${repo_list_names_array[@]}"; do
                      if starts_with_prefix "$repo_name" "proxy-"|| starts_with_prefix "$repo_name" "shared_flow-"; then
                        echo "=============================================================================================================================================================================================================================================================================="
                        echo "Acting on $repo_name"
                        get_public_key $repo_name
                        Encrypt_value
                        Update_Secret $repo_name
                        echo "=============================================================================================================================================================================================================================================================================="
                      fi
                    done
                  else
                   if starts_with_prefix "${{ inputs.Repository_Name }}" "proxy-"|| starts_with_prefix "${{ inputs.Repository_Name }}" "shared_flow-"; then
                    repo_exist=$(curl -s -o /dev/null -w "%{http_code}"\
                      -H "Accept: application/vnd.github+json" \
                      -H "Authorization: Bearer $github_token" \
                      -H "X-GitHub-Api-Version: 2022-11-28" \
                       https://api.github.com/repos/$owner_name/${{ inputs.Repository_Name }})
                     
                    if [ $repo_exist != 404 ];
                    then
                      echo "Updating secret in Repository ${{ inputs.Repository_Name }}"
                      get_public_key ${{ inputs.Repository_Name }}
                      Encrypt_value
                      Update_Secret ${{ inputs.Repository_Name }}
                    else
                      echo "$repo_exist Not Found: ${{ inputs.Repository_Name }} doesnt exist in $owner_name organisation. Please check and try again."
                      exit 1
                    fi
                   else
                    echo "Repository Name should not be empty."
                    exit 1 
                   fi
                  fi
            - name: Update repository environment variables
              if: inputs.Variable_Type == 'Environment Variable' && inputs.Repository_Environment !=''
              run: |
                starts_with_prefix() {
                    local str="$1"
                    local prefix="$2"
                    [[ "$str" == "$prefix"* ]]
                }

                update_variable(){
                  local repo_name="$1"
                  local repo_id="$2"
                  echo "Acting on Repository: $repo_name, ID: $repo_id"
                  echo "Updating ${{ inputs.Variable_Name}} in ${{ inputs.Repository_Environment }} of $repo_name"
                  curl -L \
                   -X PATCH \
                   -H "Accept: application/vnd.github+json" \
                   -H "Authorization: Bearer $github_token" \
                   -H "X-GitHub-Api-Version: 2022-11-28" \
                   https://api.github.com/repositories/$repo_id/environments/${{ inputs.Repository_Environment }}/variables/${{ inputs.Variable_Name }} \
                   -d '{"name":"'${{ inputs.Variable_Name}}'","value":"'${{ inputs.Variable_Value}}'"}'
                }
                
                if [ ${{inputs.Custom_Repository}} != true ];
                then
                  repo_id_list=$(cat repo_list.json|jq '.[]|{id,name}'|jq -s '.')
                  for item in $(echo "$repo_id_list" | jq -c '.[]'); do               
                    repo_id=$(echo "$item" | jq -r '.id')
                    repo_name=$(echo "$item" | jq -r '.name')
                    if starts_with_prefix "$repo_name" "proxy-"|| starts_with_prefix "$repo_name" "shared_flow-"; then
                      echo "=============================================================================================================================================================================================================================================================================="
                        update_variable $repo_name $repo_id
                      echo "=============================================================================================================================================================================================================================================================================="
                    fi
                  done
                else
                  if starts_with_prefix "${{ inputs.Repository_Name }}" "proxy-"|| starts_with_prefix "${{ inputs.Repository_Name }}" "shared_flow-"; then
                    repo_exist=$(curl -s -w "%{http_code}"\
                      -H "Accept: application/vnd.github+json" \
                      -H "Authorization: Bearer $github_token" \
                      -H "X-GitHub-Api-Version: 2022-11-28" \
                       https://api.github.com/repos/$owner_name/${{ inputs.Repository_Name }})
                    
                    repo_status_code=${repo_exist:(-3)}                    

                    if [ $repo_status_code != 404 ];
                    then
                      repo_id=$(echo ${repo_exist::-3}|jq -r '.id')
                      repo_name=$(echo ${repo_exist::-3}|jq -r '.name')
                      update_variable $repo_name $repo_id
                    else
                      echo "$repo_status_code Not Found: ${{ inputs.Repository_Name }} doesnt exist in $owner_name organisation. Please check and try again."
                      exit 1
                    fi
                 else
                  echo "Repository Name should not be empty."
                  exit 1 
                 fi
                fi
            - name: Add New Variable
              if: inputs.Variable_Type == 'New Variable' && inputs.Repository_Name != '' && inputs.Repository_Environment != '' && inputs.New_Variable_Name != '' && inputs.Variable_Value != ''        
              run: |
                starts_with_prefix() {
                      local str="$1"
                      local prefix="$2"
                      [[ "$str" == "$prefix"* ]]
                }
                if starts_with_prefix "${{ inputs.Repository_Name }}" "proxy-"|| starts_with_prefix "${{ inputs.Repository_Name }}" "shared_flow-"; then
                  echo "Getting Repo ID of ${{ inputs.Repository_Name }}"
                  repo_exist=$(curl -s -w "%{http_code}"\
                        -H "Accept: application/vnd.github+json" \
                        -H "Authorization: Bearer $github_token" \
                        -H "X-GitHub-Api-Version: 2022-11-28" \
                         https://api.github.com/repos/$owner_name/${{ inputs.Repository_Name }})
                  repo_id=$(echo ${repo_exist::-3}|jq -r '.id')
                  echo "RepoID: $repo_id"

                  echo "Creating new environment variable"
                  curl -L \
                    -X POST \
                    -H "Accept: application/vnd.github+json" \
                    -H "Authorization: Bearer $github_token" \
                    -H "X-GitHub-Api-Version: 2022-11-28" \
                      https://api.github.com/repositories/$repo_id/environments/${{ inputs.Repository_Environment }}/variables \
                      -d '{"name":"'${{ inputs.New_Variable_Name }}'","value":"'${{ inputs.Variable_Value }}'"}'
                  fi
            - name: Add New Secret
              if: inputs.Variable_Type == 'New Secret' && inputs.Repository_Name != '' && inputs.New_Variable_Name != '' && inputs.Variable_Value != ''        
              run: |
                starts_with_prefix() {
                      local str="$1"
                      local prefix="$2"
                      [[ "$str" == "$prefix"* ]]
                }
                if starts_with_prefix "${{ inputs.Repository_Name }}" "proxy-"|| starts_with_prefix "${{ inputs.Repository_Name }}" "shared_flow-"; then
                fi
    Notify_Workflow_Status_On_Slack:
      if: always()
      needs: Update_repo_variables
      uses: ./.github/workflows/Notify-On-Slack.yml
      with:
        workflow_status: "Updation of configuration variable ${{ inputs.Variable_Name }} was ${{ needs.Update_repo_variables.result }}"
      secrets: inherit