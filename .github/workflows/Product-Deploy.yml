name: rM-APIGEE-Product-Deploy
on:
  workflow_call:
    inputs:
      apigee-environment:
        type: string
        required: true
        description: 'To Get APIGEE environment to deploy Products'
    outputs:
      job-status: 
        value: ${{ jobs.Deploy-Product-To-APIGEE.result }}
      step-status:
        value: ${{ jobs.Deploy-Product-To-APIGEE.outputs.step-status }}
jobs:
    Deploy-Product-To-APIGEE:
        runs-on: ubuntu-latest
        environment: ${{ inputs.apigee-environment }}
        permissions:
          contents: 'read'
          id-token: 'write'
        outputs:
          step-status: ${{ steps.deploy-Product.outcome }}
        steps:
            - name: Check out repository code
              uses: actions/checkout@v4

            - name: Authenticate with GCP using WFI
              id: 'auth'
              uses: 'google-github-actions/auth@v1'
              with:
                workload_identity_provider: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
                service_account: ${{ vars.SERVICE_ACCOUNT }}
                token_format: 'access_token'
      
            - name: Install APIGEECLI
              run: |
                npm version
                curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
                echo "/home/runner/.apigeecli/bin" >> $GITHUB_PATH
        
            - name: Deploy Product
              id: deploy-Product
              run: |
                file_name=$(ls product)
                echo "File Name is $file_name"
                apigeecli products import -t=${{ steps.auth.outputs.access_token }} -o=${{ vars.GCP_PROJECT }} -f=product/$file_name --upsert > product_response.json
                product_name=$(cat product_response.json|jq -r .name)
                echo "env_product_name=$product_name" >> "$GITHUB_ENV"
                echo "Product Name is $product_name"
            
            - name: Subscribe Product
              id: subscribe-product
              if: github.repository == 'kongraja/apicicd'
              run: |
                app_exist=$(apigeecli apps get -t=${{ steps.auth.outputs.access_token }} -o=${{ vars.GCP_PROJECT }} -n="$env_product_name-app")
                echo "app checking output $app_exist"              
                if [[ ( -n "$app_exist" && "$app_exist" = "[]" ) || ( "$app_exist" = "null" ) ]];
                then
                  apigeecli apps create -t=${{ steps.auth.outputs.access_token }} -o=${{ vars.GCP_PROJECT }} -e=${{ vars.SERVICE_ACCOUNT }} -n="$env_product_name-app" -p=$env_product_name > app_response.json
                  consumerKey=$(cat app_response.json|jq -r '.credentials[].consumerKey')
                  consumerSecret=$(cat app_response.json|jq -r '.credentials[].consumerSecret')
                  echo "App Name is $env_product_name-app||$consumerKey||$consumerSecret"
                  echo "### $env_product_name deployment was successful and $env_product_name was subscribed to $env_product_name-app. <br>Please find client credentilas here. <br>Consumer Key :point_right: <b>$consumerKey</b><br> Consumer Secret :point_right: <b>$consumerSecret</b> " >> $GITHUB_STEP_SUMMARY
                else                  
                  echo "### $env_product_name updated successfully" >> $GITHUB_STEP_SUMMARY
                fi