name: rM-APIGEE-Proxy-CICD-Pipeline
run-name: ${{ github.actor }} ran pipeline for APIGEE proxy deployment.
on:
  workflow_call:
jobs:
  Code_Analysis:
    runs-on: ubuntu-latest
    #if: github.repository == 'octo-org/octo-repo-prod'
    if: github.base_ref == 'development'
    permissions:
      contents: write
    env:
      SSH_PRIVATE_KEY: ${{ secrets.GA_SSH_PRIVATE_KEY }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Code Analysis on APIGEE Proxy
        id: code_analysis_proxy
        #continue-on-error: true
        run: |
          npm install -g apigeelint
          ls -l
          echo "Running code analysis apigee proxy ....."
          mkdir ${{ github.run_id }}_code_Analysis_output
          apigeelint -s ./apiproxy/ -e PO013,PO028 -f html.js  > ${{ github.run_id }}_code_Analysis_output/apigeelint-output.html

      - name: Upload apigeelint result file
        if: always() && steps.code_analysis_proxy.outcome != 'skipped'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.run_id }}_code_Analysis_output
          path: ${{ github.run_id }}_code_Analysis_output/apigeelint-output.html
      
      - name: Retrieve the secret and decode
        id: retrieve-key
        run: |
          decoded_key=$(echo "$SSH_PRIVATE_KEY"|openssl enc -base64 -A -d)
          delimiter="$(openssl rand -hex 8)"
          echo "GA_SSH_PRIVATE_KEY_DECODED<<${delimiter}" >> "${GITHUB_OUTPUT}"
          echo "$decoded_key" >> "${GITHUB_OUTPUT}"
          echo "${delimiter}" >> "${GITHUB_OUTPUT}"
          echo "$decoded_key"

      - name: check out config files
        uses: actions/checkout@v3
        with:
          repository: reMarkable/apigee-cicd
          ref: 'main'
          path: './config-files'
          #token: ${{ github.token }}
          ssh-key: ${{ steps.retrieve-key.outputs.GA_SSH_PRIVATE_KEY_DECODED }}
      
      - name: Copy package.json
        run: |
          ls -l
          cp ./config-files/./package.json $GITHUB_WORKSPACE
          cp ./config-files/./.eslintrc.yml $GITHUB_WORKSPACE

      - name: Code Analysis on APIGEE JS files
        id: code_analysis_js
        #if: steps.code_analysis_proxy.outcome == 'success'
        #continue-on-error: true
        if: always()
        run: |
          folder_path="./apiproxy/resources/jsc"

          if [ -d "$folder_path" ]; then
            npm install
            echo "Running code analysis apigee javascript files ....."
            npx eslint --format html $folder_path  > ${{ github.run_id }}_code_Analysis_output/eslintrc-output.html
          else
              echo "The JS folder does not exist." > ${{ github.run_id }}_code_Analysis_output/eslintrc-output.html
          fi
            
      
      - name: Upload Eslint result file
        if: always() && steps.code_analysis_js.outcome != 'skipped'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.run_id }}_code_Analysis_output
          path: ${{ github.run_id }}_code_Analysis_output/eslintrc-output.html
  
  Unit_Testing:
    runs-on: ubuntu-latest
    #if: github.base_ref == 'staging'
    if: github.repository == 'octo-org/octo-repo-prod'
    needs: Code_Analysis
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Unit testing on JS files
        run: |
          npm install
          npm run test-coverage

      - name: Upload unit test results
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.run_id }}_unit_test_results
          path: coverage/
  
  Notify_On_Slack_for_approval:
    needs: Code_Analysis
    if: always()
    uses: ./.github/workflows/Notify-On-Slack.yml
    with:
      workflow_status: Awaiting for Reviewer Approval
    secrets: inherit

  Call_Dev_Reusable_workflow:
    needs: [ Code_Analysis, Notify_On_Slack_for_approval ]
    if: github.base_ref == 'development'
    uses: ./.github/workflows/Proxy-Deploy.yml
    with:
      apigee-environment: development
    secrets: inherit

  Call_Staging_Reusable_workflow:
    needs: Notify_On_Slack_for_approval
    if: always() && github.base_ref == 'staging'
    uses: ./.github/workflows/Proxy-Deploy.yml
    with:
      apigee-environment: staging
    secrets: inherit

  Call_Production_Reusable_workflow:
    needs: Notify_On_Slack_for_approval
    if: always() && github.base_ref == 'production'
    uses: ./.github/workflows/Proxy-Deploy.yml
    with:
      apigee-environment: production
    secrets: inherit
  
  Integration_Testing:
    runs-on: ubuntu-latest
    outputs:
      apigee_env: ${{ steps.proxy-intergration-test.outputs.env_apigee_env }}
    needs: [ Call_Dev_Reusable_workflow, Call_Staging_Reusable_workflow, Call_Production_Reusable_workflow ]
    if: ${{ always() && needs.Call_Dev_Reusable_workflow.outputs.job-status == 'success' || needs.Call_Staging_Reusable_workflow.outputs.job-status == 'success' || needs.Call_Production_Reusable_workflow.outputs.job-status == 'success' }}
    env:
      INT_SSH_PRIVATE_KEY: ${{ secrets.GA_SSH_PRIVATE_KEY }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      
      - name: Retrieve the secret and decode
        id: retrieve-key-integration
        run: |
          decoded_key=$(echo "$INT_SSH_PRIVATE_KEY"|openssl enc -base64 -A -d)
          delimiter="$(openssl rand -hex 8)"
          echo "GA_SSH_PRIVATE_KEY_DECODED<<${delimiter}" >> "${GITHUB_OUTPUT}"
          echo "$decoded_key" >> "${GITHUB_OUTPUT}"
          echo "${delimiter}" >> "${GITHUB_OUTPUT}"
          echo "$decoded_key"

      - name: check out config files
        uses: actions/checkout@v3
        with:
          repository: reMarkable/apigee-cicd
          ref: 'main'
          path: './config-files'
          #token: ${{ secrets.PAT_FOR_RM }}
          ssh-key: ${{ steps.retrieve-key-integration.outputs.GA_SSH_PRIVATE_KEY_DECODED }}
      
      - name: Copy package.json
        run: |
          ls -l
          cp ./config-files/./package.json $GITHUB_WORKSPACE
  
          
      - name: Integration test using postman collection
        id: proxy-intergration-test 
        run: |
          npm install
          
          if [ ${{ github.base_ref}} == development ]
          then
            host="https://test.api.systems.remarkable.com"
            authorization_header=${{ secrets.development_token }}
          elif [ ${{ github.base_ref}} == staging ]
          then
            host="https://stage.api.systems.remarkable.com"
          elif [ ${{ github.base_ref}} == production ]
          then
            host="https://api.systems.remarkable.com"
          fi

          echo "Running Newman Integration Testing ... "
          mkdir ${{ github.run_id }}_Integration_Test_output
          newman run ${{ github.workspace }}/Integration_test/*.json --env-var "Authorization=$authorization_header" --env-var "host=$host"> ${{ github.run_id }}_Integration_Test_output/newman-output.txt --bail
        #continue-on-error: true

      - name: Upload Integration test results
        if: always() && steps.proxy-intergration-test.outcome != 'skipped'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.run_id }}_Integration_Test_output
          path: ${{ github.run_id }}_Integration_Test_output/newman-output.txt

  Undeploy_failed_proxy_revision:
    needs: [ Call_Dev_Reusable_workflow, Call_Staging_Reusable_workflow, Call_Production_Reusable_workflow, Integration_Testing ]
    if: ${{ failure() && (needs.Integration_Testing.result != 'success') && (needs.Call_Dev_Reusable_workflow.outputs.stable-ver-status == 'success' || needs.Call_Staging_Reusable_workflow.outputs.stable-ver-status == 'success' || needs.Call_Production_Reusable_workflow.outputs.stable-ver-status == 'success') }}
    uses: ./.github/workflows/Proxy-Undeploy.yml
    with:
      apigee-environment: ${{ needs.Call_Dev_Reusable_workflow.outputs.acting-env }}${{ needs.Call_Production_Reusable_workflow.outputs.acting-env }}${{ needs.Call_Staging_Reusable_workflow.outputs.acting-env }}
    secrets: inherit
  
  Notify_Workflow_Status_On_Slack:
    if: always()
    needs: [Code_Analysis, Unit_Testing, Call_Dev_Reusable_workflow, Call_Staging_Reusable_workflow, Call_Production_Reusable_workflow, Integration_Testing, Undeploy_failed_proxy_revision]
    uses: ./.github/workflows/Notify-On-Slack.yml
    with:
      workflow_status: "Code Analysis: ${{ needs.Code_Analysis.result }}  Unit Testing: ${{ needs.Unit_Testing.result }}  Deployment: ${{ needs.Call_Dev_Reusable_workflow.outputs.job-status }}${{ needs.Call_Production_Reusable_workflow.outputs.job-status }}${{ needs.Call_Staging_Reusable_workflow.outputs.job-status }}  Integration Testing: ${{ needs.Integration_Testing.result }}"
    secrets: inherit