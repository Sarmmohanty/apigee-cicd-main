name: rM-APIGEE-SharedFlows-Deploy
run-name: ${{ github.actor }} ran pipeline for APIGEE SharedFlows deployment.
on:
    workflow_call:
      inputs:
        apigee-environment:
          type: string
          required: true
          description: 'To Get APIGEE environment to deploy proxy'
      outputs:
        job-status: 
          value: ${{ jobs.Deploy-SharedFlow-To-APIGEE.result }}
        step-status:
          value: ${{ jobs.Deploy-SharedFlow-To-APIGEE.outputs.step-status }}
        acting-env:
          value: ${{ inputs.apigee-environment }}
        stable-ver-status:
          value: ${{ jobs.Deploy-SharedFlow-To-APIGEE.outputs.stable-ver-status }}
jobs:
    Deploy-SharedFlow-To-APIGEE:
      runs-on: ubuntu-latest
      permissions:
        contents: 'read'
        id-token: 'write'
      environment: ${{ inputs.apigee-environment }}
      outputs:
        step-status: ${{ steps.publish-on-apigee.outcome }}
        stable-ver-status: ${{ steps.get-stable-version.outcome }}
      steps:
          - name: Check out repository code
            uses: actions/checkout@v3
          
          - name: Authenticate with GCP using WFI
            id: 'auth'
            uses: 'google-github-actions/auth@v1'
            with:
              workload_identity_provider: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
              service_account: ${{ vars.SERVICE_ACCOUNT }}
              token_format: 'access_token'
    
          - name: Install APIGEECLI
            run: |
              npm version
              curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
              echo "/home/runner/.apigeecli/bin" >> $GITHUB_PATH

          - name: Deploy APIGEE SharedFlow
            id: deploy-on-apigee
            run : |
              file_name=$(ls sharedflowbundle/*.xml)
              
              sf_name=$(basename $file_name .xml)
              echo "env_sf_name=$sf_name" >> "$GITHUB_ENV"
              apigeecli sharedflows create bundle -n=$sf_name -f=./sharedflowbundle -t=${{ steps.auth.outputs.access_token}} -o=${{ vars.GCP_PROJECT }} > sf_create_output.json
              cat sf_create_output.json
              revision_number=$(cat sf_create_output.json|jq -r .revision)
              echo "env_revision_number=$revision_number" >> "$GITHUB_ENV"
          
          - name: Get Stable version
            id: get-stable-version
            if: always() && steps.deploy-on-apigee.outcome == 'success'
            run: |
              stable_revision=$(apigeecli sharedflows listdeploy -t=${{ steps.auth.outputs.access_token}} -o=${{ vars.GCP_PROJECT }} -n=$env_sf_name);
              if [[ -n "$stable_revision" && "$stable_revision" == "{}" ]]; then    
                echo $env_revision_number > stable_version.txt
              else
                p_stable_revision=$(echo $stable_revision|jq -r '.deployments[] | select(.environment == "${{ vars.APIGEE_ENVIRONMENT }}") | .revision');
                echo $p_stable_revision > stable_version.txt
              fi
              
              echo "Deployed stable SharedFlow Revision number is $stable_revision"
              echo "Deployed active SharedFlow Revision number is $env_revision_number"
          
          - name: Upload Version Artifact
            uses: actions/upload-artifact@v4
            with:
              name: stable-version-artifact
              path: stable_version.txt
          
          - name: Publish APIGEE SharedFlow
            id: publish-on-apigee
            if: steps.deploy-on-apigee.outcome == 'success'
            run:  |
              apigeecli sharedflows deploy -e=${{ vars.APIGEE_ENVIRONMENT }} -n=$env_sf_name -v=$env_revision_number -t=${{ steps.auth.outputs.access_token}} -o=${{ vars.GCP_PROJECT }} -r -s=${{ vars.SERVICE_ACCOUNT }};
    
          - name: Delete deployed version
            if: always() && steps.publish-on-apigee.outcome == 'failure' || steps.get-stable-version.outcome == 'failure'
            run: |
              if [ $env_revision_number -eq 1 ]
              then
                apigeecli sharedflows delete -t=${{ steps.auth.outputs.access_token}} -o=${{ vars.GCP_PROJECT }} -n=$env_sf_name;
                echo "Deleted active revision $env_revision_number"
              else
                apigeecli sharedflows delete -t=${{ steps.auth.outputs.access_token}} -o=${{ vars.GCP_PROJECT }} -n=$env_sf_name -v=$env_revision_number;
                echo "Deleted active revision $env_revision_number"
              fi
          
          - name: Failing workflow if publish is skipped
            if: steps.publish-on-apigee.conclusion == 'skipped'
            run: |
              exit 1
