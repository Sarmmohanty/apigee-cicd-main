name: rM-APIGEE-Resources-Manual-Downloader
run-name: ${{ github.triggering_actor }} initiated ${{ github.workflow }} to download APIGEE components.
on: 
    workflow_dispatch:
        inputs:
            Apigee_Organisation:
              description: 'Please pass APIGEE organisatioin'     
              required: true
              type: choice
              options: 
                - 'systems-apigee-infra'
                - 'systems-apigee-dev'
                - 'systems-apigee-stage'
                - 'systems-apigee-production'
            Apigee_Component_Type:
              description: 'Select which component type would like to download.'
              required: true
              type: choice
              options:
                - All
                - API Proxy
                - API Product
                - Connectors
                - Integration
                - KVM Values
                - Shared flows
                - Target Servers
    workflow_call:
      inputs:
        Apigee_Organisation:
          description: 'Please pass APIGEE organisatioin'     
          required: true
          type: string
        Apigee_Component_Type:
          description: 'Select which component type would like to download.'
          required: true
          type: string
jobs:
    Download-Files-Manual:
        runs-on: ubuntu-latest
        permissions:
            contents: 'read'
            id-token: 'write'
        env:
            Apigee_region: 'europe-west1'
        steps:
            - name: Check out repository code
              uses: actions/checkout@v4

            - name: setting up config values
              id: set-config-values
              run: |
                #For-Systems-APIGEE-Infra
                if [ ${{ inputs.Apigee_Organisation}} == "systems-apigee-infra" ]
                then
                    echo "env_workload_identity_provider=${{ vars.WORKLOAD_IDENTITY_PROVIDER_Infra }}" >> $GITHUB_OUTPUT 
                    echo "env_service_account=${{ vars.SERVICE_ACCOUNT_Infra }}" >> $GITHUB_OUTPUT
                    echo "environment="development"" >> "$GITHUB_ENV"
                fi
                #For-Systems-APIGEE-Dev
                if [ ${{ inputs.Apigee_Organisation}} == "systems-apigee-dev" ]
                then
                    echo "env_workload_identity_provider=${{ vars.WORKLOAD_IDENTITY_PROVIDER_Dev }}" >> "$GITHUB_OUTPUT"
                    echo "env_service_account=${{ vars.SERVICE_ACCOUNT_Dev }}" >> "$GITHUB_OUTPUT"
                    echo "environment="development"" >> "$GITHUB_ENV"
                fi
                #For-Systems-APIGEE-Stage
                if [ ${{ inputs.Apigee_Organisation}} == "systems-apigee-stage" ]
                then
                    echo "env_workload_identity_provider=${{ vars.WORKLOAD_IDENTITY_PROVIDER_Stage }}" >> "$GITHUB_OUTPUT"
                    echo "env_service_account=${{ vars.SERVICE_ACCOUNT_Stage }}" >> "$GITHUB_OUTPUT"
                    echo "environment="staging"" >> "$GITHUB_ENV"
                fi
                #For-Systems-APIGEE-Production
                if [ ${{ inputs.Apigee_Organisation}} == "systems-apigee-production" ]
                then
                    echo "env_workload_identity_provider=${{ vars.WORKLOAD_IDENTITY_PROVIDER_Prod }}" >> $GITHUB_OUTPUT
                    echo "env_service_account=${{ vars.SERVICE_ACCOUNT_Prod }}" >> $GITHUB_OUTPUT
                    echo "environment="production"" >> "$GITHUB_ENV"
                fi

            - name: Authenticate with GCP using WFI
              if: steps.set-config-values.outputs.env_workload_identity_provider != ''
              id: 'auth'
              uses: 'google-github-actions/auth@v1'
              with:
                workload_identity_provider: ${{ steps.set-config-values.outputs.env_workload_identity_provider }}
                service_account: ${{ steps.set-config-values.outputs.env_service_account }}
                token_format: 'access_token'

            - name: Install APIGEECLI and IntegrationCLI
              run: |
                curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
                curl -L https://raw.githubusercontent.com/GoogleCloudPlatform/application-integration-management-toolkit/main/downloadLatest.sh | sh -
                echo "/home/runner/.apigeecli/bin" >> $GITHUB_PATH
                echo "/home/runner/.integrationcli/bin" >> $GITHUB_PATH

            - name: Download APIGEE Components
              id: download-apigee-components
              run: |
                if [ "${{ inputs.Apigee_Component_Type }}" == "API Proxy" ] || [ "${{ inputs.Apigee_Component_Type }}" == "All" ];
                then
                    echo "Downloading APIGEE proxies"
                    mkdir ${{ github.run_id }}_${{ inputs.Apigee_Organisation}}_bundels
                    apigeecli apis export -t=${{ steps.auth.outputs.access_token}} --org=${{ inputs.Apigee_Organisation }} -f=${{ github.run_id }}_${{ inputs.Apigee_Organisation}}_bundels
                fi
                
                if [ "${{ inputs.Apigee_Component_Type }}" == "API Product" ] || [ "${{ inputs.Apigee_Component_Type }}" == "All" ];
                then
                    echo "Downloading APIGEE Products"
                    mkdir ${{ github.run_id }}_${{ inputs.Apigee_Organisation}}_products
                    cd ${{ github.run_id }}_${{ inputs.Apigee_Organisation}}_products
                    apigeecli products export -t=${{ steps.auth.outputs.access_token}} --org=${{ inputs.Apigee_Organisation }}
                    cd ..
                fi
                
                if [ "${{ inputs.Apigee_Component_Type }}" == "KVM Values" ] || [ "${{ inputs.Apigee_Component_Type }}" == "All" ];
                then
                    echo "Downloading APIGEE KVM"
                    mkdir ${{ github.run_id }}_${{ inputs.Apigee_Organisation}}_kvms
                    cd ${{ github.run_id }}_${{ inputs.Apigee_Organisation}}_kvms
                    apigeecli kvms export -e=$environment -t=${{ steps.auth.outputs.access_token}} --org=${{ inputs.Apigee_Organisation }}
                    cd ..
                fi
                
                if [ "${{ inputs.Apigee_Component_Type }}" == "Shared flows" ] || [ "${{ inputs.Apigee_Component_Type }}" == "All" ];
                then
                    echo "Downloading APIGEE shared flow bundels"
                    mkdir ${{ github.run_id }}_${{ inputs.Apigee_Organisation}}_shared_flows
                    apigeecli sharedflows export -t=${{ steps.auth.outputs.access_token}} --org=${{ inputs.Apigee_Organisation }} -f=${{ github.run_id }}_${{ inputs.Apigee_Organisation}}_shared_flows
                fi
                
                if [ "${{ inputs.Apigee_Component_Type }}" == "Target Servers" ] || [ "${{ inputs.Apigee_Component_Type }}" == "All" ];
                then
                    echo "Downloading APIGEE Target servers"
                    mkdir ${{ github.run_id }}_${{ inputs.Apigee_Organisation}}_target_servers
                    cd ${{ github.run_id }}_${{ inputs.Apigee_Organisation}}_target_servers 
                    apigeecli targetservers export -e=$environment -t=${{ steps.auth.outputs.access_token}} --org=${{ inputs.Apigee_Organisation }}
                    cd ..
                fi
                
                if [ "${{ inputs.Apigee_Component_Type }}" == "Integration" ] || [ "${{ inputs.Apigee_Component_Type }}" == "All" ];
                then
                    echo "Downloading APIGEE Integrations"
                    mkdir ${{ github.run_id }}_${{ inputs.Apigee_Organisation}}_integrations
                    integrationcli integrations export -t=${{ steps.auth.outputs.access_token}} --proj=${{ inputs.Apigee_Organisation }} --reg=$Apigee_region -f=${{ github.run_id }}_${{ inputs.Apigee_Organisation}}_integrations -c=4
                fi
                
                if [ "${{ inputs.Apigee_Component_Type }}" == "Connectors" ] || [ "${{ inputs.Apigee_Component_Type }}" == "All" ];
                then
                    echo "Downloading APIGEE Connectors"
                    mkdir ${{ github.run_id }}_${{ inputs.Apigee_Organisation}}_connectors
                    integrationcli connectors export -t=${{ steps.auth.outputs.access_token}} --proj=${{ inputs.Apigee_Organisation }} --reg=$Apigee_region -f=${{ github.run_id }}_${{ inputs.Apigee_Organisation}}_connectors
                    ls -l
                fi
                    
            - name: Upload the downloaded files
              if: success() && steps.download-apigee-components.outcome == 'success'
              uses: actions/upload-artifact@v3
              with:
                name: ${{ github.run_id }}_APIGEE_Downloads
                path: ${{ github.run_id }}_*/
    Notify_Workflow_Status_On_Slack:
        if: always()
        needs:
          - Download-Files-Manual
        uses: reMarkable/apigee-cicd/.github/workflows/Notify-On-Slack.yml@main
        with:
          workflow_status: ${{ needs.Download-Files-Manual.result }}
        secrets: inherit